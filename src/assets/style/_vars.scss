@function getColor2($keyword, $index, $isOpacity: 0) {
  $map: map-get($colorList, $keyword);
  @if ($isOpacity==0) {
    @return mix(map-get($map, "c"), white, nth(map-get($map, "t"), $index));
  } @else {
    @return transparentize(
      map-get($map, "c"),
      calc(1 - nth(map-get($map, "t"), $index) / 100)
    );
  }
}

@mixin getColor2($styleKey, $keyword, $index, $isOpacity: 0) {
  #{$styleKey}: getColor2($keyword, $index, $isOpacity);
}

@function getColor3($keyword, $index) {
  $map: map-get($colorList, $keyword);
  @return rgba(
    nth(map-get($map, "r"), $index),
    nth(map-get($map, "g"), $index),
    nth(map-get($map, "b"), $index),
    1
  );
}

@mixin getColor3($styleKey, $keyword, $index, $opacity: 1) {
  #{$styleKey}: getColor3($keyword, $index, $opacity);
}

@function getSize($num, $unit: "px") {
  @return $num + $unit;
}

$colorList: (
  blue_: (
    r: (
      240,
      209,
      168,
      128,
      86,
      45,
      28,
      15,
      6,
      1,
    ),
    g: (
      244,
      221,
      191,
      161,
      130,
      99,
      74,
      51,
      32,
      16,
    ),
    b: (
      255,
      255,
      255,
      255,
      252,
      251,
      201,
      153,
      105,
      56,
    ),
  ),
  purple_: (
    r: (
      255,
      254,
      254,
      253,
      250,
      248,
      199,
      151,
      103,
      55,
    ),
    g: (
      240,
      209,
      168,
      128,
      86,
      45,
      28,
      15,
      17,
      1,
    ),
    b: (
      255,
      255,
      255,
      255,
      252,
      251,
      201,
      153,
      105,
      56,
    ),
  ),
  turquoise_: (
    r: (
      235,
      205,
      157,
      112,
      72,
      36,
      22,
      12,
      5,
      1,
    ),
    g: (
      250,
      250,
      237,
      224,
      212,
      199,
      161,
      122,
      84,
      46,
    ),
    b: (
      248,
      244,
      226,
      209,
      193,
      177,
      142,
      108,
      74,
      40,
    ),
  ),
  fuchsia_: (
    r: (
      255,
      255,
      255,
      255,
      252,
      251,
      201,
      153,
      105,
      56,
    ),
    g: (
      240,
      209,
      168,
      128,
      86,
      45,
      28,
      15,
      6,
      1,
    ),
    b: (
      251,
      244,
      235,
      225,
      214,
      203,
      161,
      121,
      82,
      43,
    ),
  ),
  red_: (
    r: (
      255,
      255,
      255,
      255,
      252,
      251,
      201,
      153,
      105,
      56,
    ),
    g: (
      240,
      209,
      168,
      128,
      86,
      45,
      28,
      15,
      6,
      1,
    ),
    b: (
      242,
      215,
      180,
      144,
      108,
      72,
      51,
      33,
      19,
      8,
    ),
  ),
  green_: (
    r: (
      239,
      217,
      178,
      142,
      109,
      79,
      59,
      41,
      26,
      13,
    ),
    g: (
      250,
      250,
      237,
      224,
      212,
      199,
      161,
      122,
      84,
      46,
    ),
    b: (
      235,
      205,
      157,
      112,
      72,
      36,
      22,
      12,
      5,
      1,
    ),
  ),
  yellow_: (
    r: (
      255,
      255,
      255,
      255,
      252,
      251,
      201,
      153,
      105,
      56,
    ),
    g: (
      252,
      244,
      235,
      225,
      213,
      203,
      161,
      121,
      82,
      43,
    ),
    b: (
      240,
      209,
      168,
      128,
      86,
      45,
      28,
      15,
      6,
      1,
    ),
  ),
  orange_: (
    //orange
    r: (255, 255, 255, 255, 252, 251, 201, 153, 105, 56),
    g: (247, 232, 212, 191, 169, 148, 115, 84, 55, 29),
    b: (240, 209, 168, 128, 86, 45, 28, 15, 6, 1),
  ),
  black_: (
    c: #242a36,
    t: (
      100,
      80,
      60,
      40,
      20,
      12,
      8,
      4,
    ),
  ),
  gray_: (
    c: #c9d0dd,
    t: (
      100,
      80,
      60,
      40,
      20,
      12,
    ),
  ),
);
$cPrimary_1: getColor3('blue_', 1);
$cPrimary_2: getColor3('blue_', 2);
$cPrimary_3: getColor3('blue_', 3);
//主题色
$cPrimary: getColor3("blue_", 6);
$cPrimaryHover: getColor3("blue_", 5);
$cPrimaryActive: getColor3("blue_", 7);
$cPrimaryPlainBgHover: getColor3("blue_", 1);
$cPrimaryTagBackground: getColor3("blue_", 1);
$cPrimaryTagBorder: getColor3("blue_", 4);
// 链接色
$cLink: getColor3("blue_", 4);
// 成功色
$cSuccess: getColor3("green_", 6);
$cSuccessHover: getColor3("green_", 5);
$cSuccessActive: getColor3("green_", 7);
$cSuccessPlainBgHover: getColor3("green_", 1);
$cSuccessTagBackground: getColor3("green_", 1);
$cSuccessTagBorder: getColor3("green_", 4);
// 警告色
$cWarning: getColor3("orange_", 6);
$cWarningHover: getColor3("orange_", 5);
$cWarningActive: getColor3("orange_", 7);
$cWarningPlainBgHover: getColor3("orange_", 1);
$cWarningTagBackground: getColor3("orange_", 1);
$cWarningTagBorder: getColor3("orange_", 4);
// 危险色
$cDanger: getColor3("red_", 6);
$cDangerHover: getColor3("red_", 5);
$cDangerActive: getColor3("red_", 7);
$cDangerPlainBgHover: getColor3("red_", 1);
$cDangerTagBackground: getColor3("red_", 1);
$cDangerTagBorder: getColor3("red_", 4);
// 提示色
$cInfo: getColor3("turquoise_", 6);
$cInfoHover: getColor3("turquoise_", 5);
$cInfoActive: getColor3("turquoise_", 7);
$cInfoPlainBgHover: getColor3("turquoise_", 1);
$cInfoTagBackground: getColor3("turquoise_", 1);
$cInfoTagBorder: getColor3("turquoise_", 4);
// 文本色（透明度方式）
$cText: getColor2("black_", 1, 1);
$cTextRead: getColor2("black_", 2, 1);
$cTextSub: getColor2("black_", 3, 1);
$cTextPlaceholder: getColor2("black_", 4, 1);
$cDisabledText: getColor2("black_", 5, 1);
// 文本色（混合方式）
$cTextNoOpa: getColor2("black_", 1);
$cTextReadNoOpa: getColor2("black_", 2);
$cTextSubNoOpa: getColor2("black_", 3);
$cTextPlaceholderNoOpa: getColor2("black_", 4);
// 无效色
$cDisabledTextNoOpa: getColor2("black_", 5);
$cDisabledBackground: getColor2("black_", 7);
$cDisabledBorder: getColor2("black_", 5);
// 边框色
$cBorder: getColor2("gray_", 3);
$cBorderL: getColor2("gray_", 4);
// 背景色
$cBackground: getColor2("gray_", 5);
$cBackgroundL: getColor2("gray_", 6);
// 黑白纯色
$cWhite: #fff;
$cBlack: #000;
// 阴影样式
$boxShadowSmall: 0px 2px 16px 0px rgba(36, 42, 54, 0.04),
  0px 2px 8px 0px rgba(36, 42, 54, 0.04), 0px 2px 4px 0px rgba(36, 42, 54, 0.04);
$boxShadowBig: 0px 8px 64px 0px rgba(36, 42, 54, 0.04),
  0px 4px 32px 0px rgba(36, 42, 54, 0.04),
  0px 2px 16px 0px rgba(36, 42, 54, 0.04);
$boxShadowHover: 0px 64px 64px 0px rgba(36, 42, 54, 0.04),
  0px 32px 32px 0px rgba(36, 42, 54, 0.04),
  0px 16px 16px 0px rgba(36, 42, 54, 0.04),
  0px 8px 8px 0px rgba(36, 42, 54, 0.04), 0px 4px 4px 0px rgba(36, 42, 54, 0.04),
  0px 2px 2px 0px rgba(36, 42, 54, 0.04),
  0px -1px 1px 0px rgba(36, 42, 54, 0.04);
$inputShadowFocus: 0px 0px 0px 2px #d1ddff;
$messageShadow: 0px 12px 64px 0px rgba(36, 42, 54, 0.04),
  0px 8px 32px 0px rgba(36, 42, 54, 0.04),
  0px 4px 16px 0px rgba(36, 42, 54, 0.04);

$cWhiteL: transparentize($cWhite, 0.5);
$cWhiteL2: transparentize($cWhite, 0.3);
$cBlackL: transparentize($cBlack, 0.5);
$cBlackL2: transparentize($cBlack, 0.3);

$glass: blur(6px);
$fontSizeText: getSize(14);
$fontSizeTextSmall: getSize(12);
$fontSizeTextBig: getSize(16);
$fontSizeH1: getSize(24);
$fontSizeH2: getSize(20);
$fontSizeH3: getSize(18);
$fontSizeH3: getSize(16);

$solidH: 1px soild $cBorder;
$solidL: 1px soild $cBorderL;
$dottedH: 1px dotted $cBorder;
$dottedL: 1px dotted $cBorderL;

$borderRadiusSmall: 4px;
$borderRadiusBig: 8px;
$borderRadiusRound: 50%;

$duration: 0.3s all ease-in;

$colorMap: (
  color: (
    cPrimary: $cPrimary,
    cPrimaryHover: $cPrimaryHover,
    cPrimaryActive: $cPrimaryActive,
    cLink: $cLink,
    cSuccess: $cSuccess,
    cSuccessHover: $cSuccessHover,
    cSuccessActive: $cSuccessActive,
    cWarning: $cWarning,
    cWarningHover: $cWarningHover,
    cWarningActive: $cWarningActive,
    cDanger: $cDanger,
    cDangerHover: $cDangerHover,
    cDangerActive: $cDangerActive,
    cInfo: $cInfo,
    cInfoHover: $cInfoHover,
    cInfoActive: $cInfoActive,
    cText: $cText,
    cTextRead: $cTextRead,
    cTextSub: $cTextSub,
    cTextPlaceholder: $cTextPlaceholder,
    cDisabledText: $cDisabledText,
    cDisabledBackground: $cDisabledBackground,
    cDisabledBorder: $cDisabledBorder,
    cBorder: $cBorder,
    cBorderL: $cBorderL,
    cBackground: $cBackground,
    cBackgroundL: $cBackgroundL,
    cWhite: $cWhite,
    cBlack: $cBlack,
    cWhiteL: $cWhiteL,
    cWhiteL2: $cWhiteL2,
    cBlackL: $cBlackL,
    cBlackL2: $cBlackL2,
  ),
  opacity: (
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
  ),
);
$classMap: (
  color: (
    ft: color,
    bg: background-color,
    bd: border,
  ),
  border: (
    outline,
    border,
  ),
  margin: (
    w: width,
    h: height,
    p: padding,
    pt: padding-top,
    pr: padding-right,
    pb: padding-bottom,
    pl: padding-left,
    m: margin,
    mt: margin-top,
    mr: margin-right,
    mb: margin-bottom,
    ml: margin-left,
    fs: font-size,
    br: border-radius,
  ),
  flex: (
    type: (
      flex: flex,
      iflex: inline-flex,
    ),
    jc: (
      s: flex-start,
      e: flex-end,
      c: center,
      a: space-around,
      b: space-between,
    ),
    ai: (
      s: flex-start,
      e: flex-end,
      c: center,
      t: stretch,
    ),
    isColList: (
      0,
      1,
    ),
    isWarpList: (
      0,
      1,
    ),
  ),
);

$flexMap: (
  typeMap: (
    flex: flex,
    iflex: inline-flex,
  ),
  jcMap: (
    s: flex-start,
    e: flex-end,
    c: center,
    a: space-around,
    b: space-between,
  ),
  aiMap: (
    s: flex-start,
    e: flex-end,
    c: center,
    t: stretch,
  ),
  isColList: (
    0,
    1,
  ),
  isWarpList: (
    0,
    1,
  ),
);

@mixin flexHandler(
  $flex: flex,
  $jc: flex-start,
  $ai: stretch,
  $isCol: 0,
  $isWarp: 0
) {
  display: $flex;
  justify-content: $jc;
  align-items: $ai;
  @if $isCol!=0 {
    flex-direction: column;
  }
  @if $isWarp!=0 {
    flex-wrap: wrap;
  }
}

@mixin btnCommon(
  $width: 0,
  $height: 0,
  $fontSize: 14px,
  $color: $cText,
  $bgColor: 0,
  $borderColor: 0,
  $borderRadius: 0,
  $boxShadow: 0,
  $isBold: 0
) {
  position: relative;
  user-select: none;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  background: if($bgColor, $bgColor, transparent);
  color: $color;
  font-size: #{$fontSize}px;
  @if $width == 0 and $height==0 {
    width: max-content;
    height: max-content;
  } @else {
    width: if($width==100%, 100%, #{$width}px);
    height: #{$height}px;
  }
  @if $bgColor!=0 {
    &:before {
      position: absolute;
      top: 50%;
      left: 50%;
      width: 100%;
      height: 100%;
      background-color: #000;
      //border: inherit;
      border-color: #000;
      border-radius: inherit;
      transform: translate(-50%, -50%);
      opacity: 0;
      content: " ";
    }
    &:active {
      &:before {
        opacity: 0.1;
      }
    }
  } @else {
    &:active {
      color: mix($color, #000, 90%);
    }
  }

  @if $borderColor != 0 {
    border: 1px solid $borderColor;
  }
  @if $borderRadius!=0 {
    border-radius: #{$borderRadius}px;
  }
  @if $boxShadow != 0 {
    box-shadow: $boxShadow;
  }
  @if $isBold != 0 {
    font-weight: 600;
  }
  &[disabled] {
    cursor: not-allowed;
    color: getColor($cText, 2);
    @if $bgColor!=0 {
      background: getColor($cText, 1);
    }
    @if $borderColor!=0 {
      border-color: getColor($cText, 1);
    }
  }
}

@function getColor($color, $opacity, $isOpacity: 1) {
  @if $isOpacity==1 {
    @return transparentize($color, 1-$opacity/10);
  } @else {
    @return mix($color, $cWhite, $opacity * 10%);
  }
}
